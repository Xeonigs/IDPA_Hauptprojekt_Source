{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nvar Timer = /*#__PURE__*/function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    } // Cancels any previous scheduleTimeout and schedules callback\n\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this = this;\n\n      clearTimeout(this.timer);\n      this.timer = setTimeout(function () {\n        _this.tries = _this.tries + 1;\n\n        _this.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n\n  return Timer;\n}();\n\nexport { Timer as default };","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\realtime-js\\src\\lib\\timer.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;AAWG;IACkB,K;AAInB,iBAAmB,QAAnB,EAA8C,SAA9C,EAAiE;AAAA;;AAA9C,SAAA,QAAA,GAAA,QAAA;AAA2B,SAAA,SAAA,GAAA,SAAA;AAH9C,SAAA,KAAA,GAA4B,SAA5B;AACA,SAAA,KAAA,GAAgB,CAAhB;AAGE,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;;;;WAED,iBAAK;AACH,WAAK,KAAL,GAAa,CAAb;AACA,MAAA,YAAY,CAAC,KAAK,KAAN,CAAZ;AACD,K,CAED;;;;WACA,2BAAe;AAAA;;AACb,MAAA,YAAY,CAAC,KAAK,KAAN,CAAZ;AAEA,WAAK,KAAL,GAAkB,UAAU,CAAC,YAAK;AAChC,QAAA,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,KAAL,GAAa,CAA1B;;AACA,QAAA,KAAI,CAAC,QAAL;AACD,OAH2B,EAGzB,KAAK,SAAL,CAAe,KAAK,KAAL,GAAa,CAA5B,CAHyB,CAA5B;AAID;;;;;;SAtBkB,K","sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}