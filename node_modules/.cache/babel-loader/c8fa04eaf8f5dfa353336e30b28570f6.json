{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\n\nvar PostgrestClient = /*#__PURE__*/function () {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  function PostgrestClient(url) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n\n    _classCallCheck(this, PostgrestClient);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n\n\n  _createClass(PostgrestClient, [{\n    key: \"auth\",\n    value: function auth(token) {\n      this.headers['Authorization'] = \"Bearer \".concat(token);\n      return this;\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table  The table name to operate on.\n     */\n\n  }, {\n    key: \"from\",\n    value: function from(table) {\n      var url = \"\".concat(this.url, \"/\").concat(table);\n      return new PostgrestQueryBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head  When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn, params) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$count = _ref2.count,\n          count = _ref2$count === void 0 ? null : _ref2$count;\n\n      var url = \"\".concat(this.url, \"/rpc/\").concat(fn);\n      return new PostgrestRpcBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch\n      }).rpc(params, {\n        head: head,\n        count: count\n      });\n    }\n  }]);\n\n  return PostgrestClient;\n}();\n\nexport { PostgrestClient as default };","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestClient.ts"],"names":[],"mappings":";;AAAA,OAAO,qBAAP,MAAkC,6BAAlC;AACA,OAAO,mBAAP,MAAgC,2BAAhC;AAEA,SAAS,eAAT,QAAgC,iBAAhC;;IAGqB,e;AAMnB;;;;;;AAMG;AACH,2BACE,GADF,EAMiF;AAAA,mFAAF,EAAE;AAAA,4BAH7E,OAG6E;AAAA,QAH7E,OAG6E,6BAHnE,EAGmE;AAAA,QAF7E,MAE6E,QAF7E,MAE6E;AAAA,QAD7E,KAC6E,QAD7E,KAC6E;;AAAA;;AAE/E,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,eAAR,CAAA,EAA4B,OAA5B,CAAZ;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,KAAL,GAAa,KAAb;AACD;AAED;;;;AAIG;;;;;WACH,cAAK,KAAL,EAAkB;AAChB,WAAK,OAAL,CAAa,eAAb,qBAA0C,KAA1C;AACA,aAAO,IAAP;AACD;AAED;;;;AAIG;;;;WACH,cAAc,KAAd,EAA2B;AACzB,UAAM,GAAG,aAAM,KAAK,GAAX,cAAkB,KAAlB,CAAT;AACA,aAAO,IAAI,qBAAJ,CAA6B,GAA7B,EAAkC;AACvC,QAAA,OAAO,EAAE,KAAK,OADyB;AAEvC,QAAA,MAAM,EAAE,KAAK,MAF0B;AAGvC,QAAA,KAAK,EAAE,KAAK;AAH2B,OAAlC,CAAP;AAKD;AAED;;;;;;;AAOG;;;;WACH,aACE,EADF,EAEE,MAFF,EASQ;AAAA,sFAAF,EAAE;AAAA,6BALJ,IAKI;AAAA,UALJ,IAKI,2BALG,KAKH;AAAA,8BAJJ,KAII;AAAA,UAJJ,KAII,4BAJI,IAIJ;;AAEN,UAAM,GAAG,aAAM,KAAK,GAAX,kBAAsB,EAAtB,CAAT;AACA,aAAO,IAAI,mBAAJ,CAA2B,GAA3B,EAAgC;AACrC,QAAA,OAAO,EAAE,KAAK,OADuB;AAErC,QAAA,MAAM,EAAE,KAAK,MAFwB;AAGrC,QAAA,KAAK,EAAE,KAAK;AAHyB,OAAhC,EAIJ,GAJI,CAIA,MAJA,EAIQ;AAAE,QAAA,IAAI,EAAJ,IAAF;AAAQ,QAAA,KAAK,EAAL;AAAR,OAJR,CAAP;AAKD;;;;;;SA5EkB,e","sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder'\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder'\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { Fetch } from './lib/types'\n\nexport default class PostgrestClient {\n  url: string\n  headers: { [key: string]: string }\n  schema?: string\n  fetch?: Fetch\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: { headers?: { [key: string]: string }; schema?: string; fetch?: Fetch } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token: string): this {\n    this.headers['Authorization'] = `Bearer ${token}`\n    return this\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from<T = any>(table: string): PostgrestQueryBuilder<T> {\n    const url = `${this.url}/${table}`\n    return new PostgrestQueryBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    const url = `${this.url}/rpc/${fn}`\n    return new PostgrestRpcBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n    }).rpc(params, { head, count })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}