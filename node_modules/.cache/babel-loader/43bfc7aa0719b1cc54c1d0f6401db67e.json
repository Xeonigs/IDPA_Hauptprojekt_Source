{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _inherits from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\n\nvar PostgrestRpcBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestRpcBuilder, _PostgrestBuilder);\n\n  var _super = _createSuper(PostgrestRpcBuilder);\n\n  function PostgrestRpcBuilder(url) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n\n    _classCallCheck(this, PostgrestRpcBuilder);\n\n    _this = _super.call(this, {\n      fetch: fetch\n    });\n    _this.url = new URL(url);\n    _this.headers = Object.assign({}, headers);\n    _this.schema = schema;\n    return _this;\n  }\n  /**\n   * Perform a function call.\n   */\n\n\n  _createClass(PostgrestRpcBuilder, [{\n    key: \"rpc\",\n    value: function rpc(params) {\n      var _this2 = this;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$count = _ref2.count,\n          count = _ref2$count === void 0 ? null : _ref2$count;\n\n      if (head) {\n        this.method = 'HEAD';\n\n        if (params) {\n          Object.entries(params).forEach(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                name = _ref4[0],\n                value = _ref4[1];\n\n            _this2.url.searchParams.append(name, value);\n          });\n        }\n      } else {\n        this.method = 'POST';\n        this.body = params;\n      }\n\n      if (count) {\n        if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += \",count=\".concat(count);else this.headers['Prefer'] = \"count=\".concat(count);\n      }\n\n      return new PostgrestFilterBuilder(this);\n    }\n  }]);\n\n  return PostgrestRpcBuilder;\n}(PostgrestBuilder);\n\nexport { PostgrestRpcBuilder as default };","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\postgrest-js\\src\\lib\\PostgrestRpcBuilder.ts"],"names":[],"mappings":";;;;;AAAA,SAAgB,gBAAhB,QAAwC,SAAxC;AACA,OAAO,sBAAP,MAAmC,0BAAnC;;IAEqB,mB;;;;;AACnB,+BACE,GADF,EAMiF;AAAA;;AAAA,mFAAF,EAAE;AAAA,4BAH7E,OAG6E;AAAA,QAH7E,OAG6E,6BAHnE,EAGmE;AAAA,QAF7E,MAE6E,QAF7E,MAE6E;AAAA,QAD7E,KAC6E,QAD7E,KAC6E;;AAAA;;AAE/E,8BAAO;AAAE,MAAA,KAAK,EAAL;AAAF,KAAP;AACA,UAAK,GAAL,GAAW,IAAI,GAAJ,CAAQ,GAAR,CAAX;AACA,UAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,OAAR,CAAZ;AACA,UAAK,MAAL,GAAc,MAAd;AAL+E;AAMhF;AAED;;AAEG;;;;;WACH,aACE,MADF,EAQQ;AAAA;;AAAA,sFAAF,EAAE;AAAA,6BALJ,IAKI;AAAA,UALJ,IAKI,2BALG,KAKH;AAAA,8BAJJ,KAII;AAAA,UAJJ,KAII,4BAJI,IAIJ;;AAEN,UAAI,IAAJ,EAAU;AACR,aAAK,MAAL,GAAc,MAAd;;AAEA,YAAI,MAAJ,EAAY;AACV,UAAA,MAAM,CAAC,OAAP,CAAe,MAAf,EAAuB,OAAvB,CAA+B,iBAAkB;AAAA;AAAA,gBAAhB,IAAgB;AAAA,gBAAV,KAAU;;AAC/C,YAAA,MAAI,CAAC,GAAL,CAAS,YAAT,CAAsB,MAAtB,CAA6B,IAA7B,EAAmC,KAAnC;AACD,WAFD;AAGD;AACF,OARD,MAQO;AACL,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,IAAL,GAAY,MAAZ;AACD;;AAED,UAAI,KAAJ,EAAW;AACT,YAAI,KAAK,OAAL,CAAa,QAAb,MAA2B,SAA/B,EAA0C,KAAK,OAAL,CAAa,QAAb,sBAAoC,KAApC,EAA1C,KACK,KAAK,OAAL,CAAa,QAAb,oBAAkC,KAAlC;AACN;;AAED,aAAO,IAAI,sBAAJ,CAA2B,IAA3B,CAAP;AACD;;;;EA/CiD,gB;;SAA/B,mB","sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestRpcBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: { headers?: { [key: string]: string }; schema?: string; fetch?: Fetch } = {}\n  ) {\n    super(({ fetch } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Perform a function call.\n   */\n  rpc(\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    if (head) {\n      this.method = 'HEAD'\n\n      if (params) {\n        Object.entries(params).forEach(([name, value]) => {\n          this.url.searchParams.append(name, value)\n        })\n      }\n    } else {\n      this.method = 'POST'\n      this.body = params\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`\n      else this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}