{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, put, remove } from './fetch';\nimport { DEFAULT_HEADERS } from './constants';\nexport var StorageBucketApi = /*#__PURE__*/function () {\n  function StorageBucketApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fetch = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, StorageBucketApi);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = fetch;\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n\n\n  _createClass(StorageBucketApi, [{\n    key: \"listBuckets\",\n    value: function listBuckets() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n\n  }, {\n    key: \"getBucket\",\n    value: function getBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @returns newly created bucket id\n     */\n\n  }, {\n    key: \"createBucket\",\n    value: function createBucket(id) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        public: false\n      };\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  data: data.name,\n                  error: null\n                });\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Updates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     */\n\n  }, {\n    key: \"updateBucket\",\n    value: function updateBucket(id, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return put(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n\n  }, {\n    key: \"emptyBucket\",\n    value: function emptyBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id, \"/empty\"), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n\n  }, {\n    key: \"deleteBucket\",\n    value: function deleteBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return remove(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n  }]);\n\n  return StorageBucketApi;\n}();","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\storage-js\\src\\lib\\StorageBucketApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fetch, get, post, put, remove } from './fetch'\nimport { Bucket } from './types'\nimport { DEFAULT_HEADERS } from './constants'\n\nexport class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch?: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = fetch\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n  async listBuckets(): Promise<{ data: Bucket[] | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(id: string): Promise<{ data: Bucket | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: { public: boolean } = { public: false }\n  ): Promise<{ data: string | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data: data.name, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   */\n  async updateBucket(\n    id: string,\n    options: { public: boolean }\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}