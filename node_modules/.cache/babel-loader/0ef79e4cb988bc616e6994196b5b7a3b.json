{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, put, remove } from './lib/fetch';\nimport { COOKIE_OPTIONS } from './lib/constants';\nimport { setCookie, deleteCookie } from './lib/cookies';\nimport { expiresAt } from './lib/helpers';\n\nvar GoTrueApi = /*#__PURE__*/function () {\n  function GoTrueApi(_ref) {\n    var _ref$url = _ref.url,\n        url = _ref$url === void 0 ? '' : _ref$url,\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        cookieOptions = _ref.cookieOptions,\n        fetch = _ref.fetch;\n\n    _classCallCheck(this, GoTrueApi);\n\n    this.url = url;\n    this.headers = headers;\n    this.cookieOptions = Object.assign(Object.assign({}, COOKIE_OPTIONS), cookieOptions);\n    this.fetch = fetch;\n  }\n  /**\n   * Creates a new user.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param attributes The data you want to create the user with.\n   * @param jwt A valid JWT. Must be a full-access API key (e.g. service_role key).\n   */\n\n\n  _createClass(GoTrueApi, [{\n    key: \"createUser\",\n    value: function createUser(attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/admin/users\"), attributes, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n\n  }, {\n    key: \"listUsers\",\n    value: function listUsers() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/admin/users\"), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  data: data.users,\n                  error: null\n                });\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a new user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n\n  }, {\n    key: \"signUpWithEmail\",\n    value: function signUpWithEmail(email, password) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var headers, queryString, data, session;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n\n                if (options.redirectTo) {\n                  queryString = '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n\n                _context3.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/signup\").concat(queryString), {\n                  email: email,\n                  password: password,\n                  data: options.data\n                }, {\n                  headers: headers\n                });\n\n              case 6:\n                data = _context3.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context3.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 12]]);\n      }));\n    }\n    /**\n     * Logs in an existing user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n\n  }, {\n    key: \"signInWithEmail\",\n    value: function signInWithEmail(email, password) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var headers, queryString, data, session;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '?grant_type=password';\n\n                if (options.redirectTo) {\n                  queryString += '&redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n\n                _context4.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/token\").concat(queryString), {\n                  email: email,\n                  password: password\n                }, {\n                  headers: headers\n                });\n\n              case 6:\n                data = _context4.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context4.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n    }\n    /**\n     * Signs up a new user using their phone number and a password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     * @param data Optional user metadata.\n     */\n\n  }, {\n    key: \"signUpWithPhone\",\n    value: function signUpWithPhone(phone, password) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var headers, data, session;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                headers = Object.assign({}, this.headers);\n                _context5.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/signup\"), {\n                  phone: phone,\n                  password: password,\n                  data: options.data\n                }, {\n                  headers: headers\n                });\n\n              case 4:\n                data = _context5.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context5.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n\n              case 10:\n                _context5.prev = 10;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Logs in an existing user using their phone number and password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     */\n\n  }, {\n    key: \"signInWithPhone\",\n    value: function signInWithPhone(phone, password) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var headers, queryString, data, session;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '?grant_type=password';\n                _context6.next = 5;\n                return post(this.fetch, \"\".concat(this.url, \"/token\").concat(queryString), {\n                  phone: phone,\n                  password: password\n                }, {\n                  headers: headers\n                });\n\n              case 5:\n                data = _context6.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context6.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Sends a magic login link to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n\n  }, {\n    key: \"sendMagicLinkEmail\",\n    value: function sendMagicLinkEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var headers, queryString, data;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n\n                if (options.redirectTo) {\n                  queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n\n                _context7.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/magiclink\").concat(queryString), {\n                  email: email\n                }, {\n                  headers: headers\n                });\n\n              case 6:\n                data = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 10:\n                _context7.prev = 10;\n                _context7.t0 = _context7[\"catch\"](0);\n                return _context7.abrupt(\"return\", {\n                  data: null,\n                  error: _context7.t0\n                });\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n     * @param phone The user's phone number WITH international prefix\n     */\n\n  }, {\n    key: \"sendMobileOTP\",\n    value: function sendMobileOTP(phone) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var headers, data;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                headers = Object.assign({}, this.headers);\n                _context8.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/otp\"), {\n                  phone: phone\n                }, {\n                  headers: headers\n                });\n\n              case 4:\n                data = _context8.sent;\n                return _context8.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 8:\n                _context8.prev = 8;\n                _context8.t0 = _context8[\"catch\"](0);\n                return _context8.abrupt(\"return\", {\n                  data: null,\n                  error: _context8.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Send User supplied Mobile OTP to be verified\n     * @param phone The user's phone number WITH international prefix\n     * @param token token that user was sent to their mobile phone\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n\n  }, {\n    key: \"verifyMobileOTP\",\n    value: function verifyMobileOTP(phone, token) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var headers, data;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                headers = Object.assign({}, this.headers);\n                _context9.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/verify\"), {\n                  phone: phone,\n                  token: token,\n                  type: 'sms',\n                  redirect_to: options.redirectTo\n                }, {\n                  headers: headers\n                });\n\n              case 4:\n                data = _context9.sent;\n                return _context9.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 8:\n                _context9.prev = 8;\n                _context9.t0 = _context9[\"catch\"](0);\n                return _context9.abrupt(\"return\", {\n                  data: null,\n                  error: _context9.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata\n     */\n\n  }, {\n    key: \"inviteUserByEmail\",\n    value: function inviteUserByEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var headers, queryString, data;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n\n                if (options.redirectTo) {\n                  queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n\n                _context10.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/invite\").concat(queryString), {\n                  email: email,\n                  data: options.data\n                }, {\n                  headers: headers\n                });\n\n              case 6:\n                data = _context10.sent;\n                return _context10.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 10:\n                _context10.prev = 10;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", {\n                  data: null,\n                  error: _context10.t0\n                });\n\n              case 13:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Sends a reset request to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n\n  }, {\n    key: \"resetPasswordForEmail\",\n    value: function resetPasswordForEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var headers, queryString, data;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n\n                if (options.redirectTo) {\n                  queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n\n                _context11.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/recover\").concat(queryString), {\n                  email: email\n                }, {\n                  headers: headers\n                });\n\n              case 6:\n                data = _context11.sent;\n                return _context11.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 10:\n                _context11.prev = 10;\n                _context11.t0 = _context11[\"catch\"](0);\n                return _context11.abrupt(\"return\", {\n                  data: null,\n                  error: _context11.t0\n                });\n\n              case 13:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Create a temporary object with all configured headers and\n     * adds the Authorization token to be used on request methods\n     * @param jwt A valid, logged-in JWT.\n     */\n\n  }, {\n    key: \"_createRequestHeaders\",\n    value: function _createRequestHeaders(jwt) {\n      var headers = Object.assign({}, this.headers);\n      headers['Authorization'] = \"Bearer \".concat(jwt);\n      return headers;\n    }\n    /**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     */\n\n  }, {\n    key: \"signOut\",\n    value: function signOut(jwt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.prev = 0;\n                _context12.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/logout\"), {}, {\n                  headers: this._createRequestHeaders(jwt),\n                  noResolveJson: true\n                });\n\n              case 3:\n                return _context12.abrupt(\"return\", {\n                  error: null\n                });\n\n              case 6:\n                _context12.prev = 6;\n                _context12.t0 = _context12[\"catch\"](0);\n                return _context12.abrupt(\"return\", {\n                  error: _context12.t0\n                });\n\n              case 9:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param provider One of the providers supported by GoTrue.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param scopes A space-separated list of scopes granted to the OAuth application.\n     */\n\n  }, {\n    key: \"getUrlForProvider\",\n    value: function getUrlForProvider(provider, options) {\n      var urlParams = [\"provider=\".concat(encodeURIComponent(provider))];\n\n      if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n        urlParams.push(\"redirect_to=\".concat(encodeURIComponent(options.redirectTo)));\n      }\n\n      if (options === null || options === void 0 ? void 0 : options.scopes) {\n        urlParams.push(\"scopes=\".concat(encodeURIComponent(options.scopes)));\n      }\n\n      return \"\".concat(this.url, \"/authorize?\").concat(urlParams.join('&'));\n    }\n    /**\n     * Gets the user details.\n     * @param jwt A valid, logged-in JWT.\n     */\n\n  }, {\n    key: \"getUser\",\n    value: function getUser(jwt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.prev = 0;\n                _context13.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/user\"), {\n                  headers: this._createRequestHeaders(jwt)\n                });\n\n              case 3:\n                data = _context13.sent;\n                return _context13.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context13.prev = 7;\n                _context13.t0 = _context13[\"catch\"](0);\n                return _context13.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context13.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Updates the user data.\n     * @param jwt A valid, logged-in JWT.\n     * @param attributes The data you want to update.\n     */\n\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(jwt, attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.prev = 0;\n                _context14.next = 3;\n                return put(this.fetch, \"\".concat(this.url, \"/user\"), attributes, {\n                  headers: this._createRequestHeaders(jwt)\n                });\n\n              case 3:\n                data = _context14.sent;\n                return _context14.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context14.prev = 7;\n                _context14.t0 = _context14[\"catch\"](0);\n                return _context14.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context14.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     *\n     * @param uid The user uid you want to remove.\n     * @param jwt A valid JWT. Must be a full-access API key (e.g. service_role key).\n     */\n\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(uid, jwt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.prev = 0;\n                _context15.next = 3;\n                return remove(this.fetch, \"\".concat(this.url, \"/admin/users/\").concat(uid), {}, {\n                  headers: this._createRequestHeaders(jwt)\n                });\n\n              case 3:\n                data = _context15.sent;\n                return _context15.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context15.prev = 7;\n                _context15.t0 = _context15[\"catch\"](0);\n                return _context15.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context15.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n\n  }, {\n    key: \"refreshAccessToken\",\n    value: function refreshAccessToken(refreshToken) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var data, session;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.prev = 0;\n                _context16.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/token?grant_type=refresh_token\"), {\n                  refresh_token: refreshToken\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context16.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context16.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n\n              case 9:\n                _context16.prev = 9;\n                _context16.t0 = _context16[\"catch\"](0);\n                return _context16.abrupt(\"return\", {\n                  data: null,\n                  error: _context16.t0\n                });\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[0, 9]]);\n      }));\n    }\n    /**\n     * Set/delete the auth cookie based on the AuthChangeEvent.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     */\n\n  }, {\n    key: \"setAuthCookie\",\n    value: function setAuthCookie(req, res) {\n      if (req.method !== 'POST') {\n        res.setHeader('Allow', 'POST');\n        res.status(405).end('Method Not Allowed');\n      }\n\n      var _req$body = req.body,\n          event = _req$body.event,\n          session = _req$body.session;\n      if (!event) throw new Error('Auth event missing!');\n\n      if (event === 'SIGNED_IN') {\n        if (!session) throw new Error('Auth session missing!');\n        setCookie(req, res, {\n          name: this.cookieOptions.name,\n          value: session.access_token,\n          domain: this.cookieOptions.domain,\n          maxAge: this.cookieOptions.lifetime,\n          path: this.cookieOptions.path,\n          sameSite: this.cookieOptions.sameSite\n        });\n      }\n\n      if (event === 'SIGNED_OUT') deleteCookie(req, res, this.cookieOptions.name);\n      res.status(200).json({});\n    }\n    /**\n     * Get user by reading the cookie from the request.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     */\n\n  }, {\n    key: \"getUserByCookie\",\n    value: function getUserByCookie(req) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var token, _yield$this$getUser, user, error;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.prev = 0;\n\n                if (req.cookies) {\n                  _context17.next = 3;\n                  break;\n                }\n\n                throw new Error('Not able to parse cookies! When using Express make sure the cookie-parser middleware is in use!');\n\n              case 3:\n                if (req.cookies[this.cookieOptions.name]) {\n                  _context17.next = 5;\n                  break;\n                }\n\n                throw new Error('No cookie found!');\n\n              case 5:\n                token = req.cookies[this.cookieOptions.name];\n                _context17.next = 8;\n                return this.getUser(token);\n\n              case 8:\n                _yield$this$getUser = _context17.sent;\n                user = _yield$this$getUser.user;\n                error = _yield$this$getUser.error;\n\n                if (!error) {\n                  _context17.next = 13;\n                  break;\n                }\n\n                throw error;\n\n              case 13:\n                return _context17.abrupt(\"return\", {\n                  token: token,\n                  user: user,\n                  data: user,\n                  error: null\n                });\n\n              case 16:\n                _context17.prev = 16;\n                _context17.t0 = _context17[\"catch\"](0);\n                return _context17.abrupt(\"return\", {\n                  token: null,\n                  user: null,\n                  data: null,\n                  error: _context17.t0\n                });\n\n              case 19:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[0, 16]]);\n      }));\n    }\n    /**\n     * Generates links to be sent via email or other.\n     * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     * @param email The user's email.\n     * @param password User password. For signup only.\n     * @param data Optional user metadata. For signup only.\n     * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     */\n\n  }, {\n    key: \"generateLink\",\n    value: function generateLink(type, email) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.prev = 0;\n                _context18.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/admin/generate_link\"), {\n                  type: type,\n                  email: email,\n                  password: options.password,\n                  data: options.data,\n                  redirect_to: options.redirectTo\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context18.sent;\n                return _context18.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context18.prev = 7;\n                _context18.t0 = _context18[\"catch\"](0);\n                return _context18.abrupt(\"return\", {\n                  data: null,\n                  error: _context18.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[0, 7]]);\n      }));\n    }\n  }]);\n\n  return GoTrueApi;\n}();\n\nexport { GoTrueApi as default };","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\gotrue-js\\src\\GoTrueApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fetch, get, post, put, remove } from './lib/fetch'\nimport { Session, Provider, UserAttributes, CookieOptions, User } from './lib/types'\nimport { COOKIE_OPTIONS } from './lib/constants'\nimport { setCookie, deleteCookie } from './lib/cookies'\nimport { expiresAt } from './lib/helpers'\n\nimport type { ApiError } from './lib/types'\nexport default class GoTrueApi {\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected cookieOptions: CookieOptions\n  protected fetch?: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    cookieOptions,\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    cookieOptions?: CookieOptions\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.cookieOptions = { ...COOKIE_OPTIONS, ...cookieOptions }\n    this.fetch = fetch\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param attributes The data you want to create the user with.\n   * @param jwt A valid JWT. Must be a full-access API key (e.g. service_role key).\n   */\n  async createUser(\n    attributes: UserAttributes\n  ): Promise<{ data: null; error: ApiError } | { data: User; error: null }> {\n    try {\n      const data: any = await post(this.fetch, `${this.url}/admin/users`, attributes, {\n        headers: this.headers,\n      })\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async listUsers(): Promise<{ data: null; error: ApiError } | { data: User[]; error: null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/admin/users`, {\n        headers: this.headers,\n      })\n      return { data: data.users, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Creates a new user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUpWithEmail(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n      data?: object\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString = '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/signup${queryString}`,\n        { email, password, data: options.data },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an existing user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async signInWithEmail(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = '?grant_type=password'\n      if (options.redirectTo) {\n        queryString += '&redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { email, password },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Signs up a new user using their phone number and a password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   * @param data Optional user metadata.\n   */\n  async signUpWithPhone(\n    phone: string,\n    password: string,\n    options: {\n      data?: object\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/signup`,\n        { phone, password, data: options.data },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an existing user using their phone number and password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   */\n  async signInWithPhone(\n    phone: string,\n    password: string\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const queryString = '?grant_type=password'\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { phone, password },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a magic login link to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async sendMagicLinkEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/magiclink${queryString}`,\n        { email },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n   * @param phone The user's phone number WITH international prefix\n   */\n  async sendMobileOTP(phone: string): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(this.fetch, `${this.url}/otp`, { phone }, { headers })\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Send User supplied Mobile OTP to be verified\n   * @param phone The user's phone number WITH international prefix\n   * @param token token that user was sent to their mobile phone\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyMobileOTP(\n    phone: string,\n    token: string,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/verify`,\n        { phone, token, type: 'sms', redirect_to: options.redirectTo },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      data?: object\n    } = {}\n  ): Promise<{ data: User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/invite${queryString}`,\n        { email, data: options.data },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a reset request to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/recover${queryString}`,\n        { email },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Create a temporary object with all configured headers and\n   * adds the Authorization token to be used on request methods\n   * @param jwt A valid, logged-in JWT.\n   */\n  private _createRequestHeaders(jwt: string) {\n    const headers = { ...this.headers }\n    headers['Authorization'] = `Bearer ${jwt}`\n    return headers\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ error: ApiError | null }> {\n    try {\n      await post(\n        this.fetch,\n        `${this.url}/logout`,\n        {},\n        { headers: this._createRequestHeaders(jwt), noResolveJson: true }\n      )\n      return { error: null }\n    } catch (e) {\n      return { error: e as ApiError }\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n  getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  /**\n   * Gets the user details.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async getUser(\n    jwt: string\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/user`, {\n        headers: this._createRequestHeaders(jwt),\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates the user data.\n   * @param jwt A valid, logged-in JWT.\n   * @param attributes The data you want to update.\n   */\n  async updateUser(\n    jwt: string,\n    attributes: UserAttributes\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await put(this.fetch, `${this.url}/user`, attributes, {\n        headers: this._createRequestHeaders(jwt),\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param uid The user uid you want to remove.\n   * @param jwt A valid JWT. Must be a full-access API key (e.g. service_role key).\n   */\n  async deleteUser(\n    uid: string,\n    jwt: string\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await remove(\n        this.fetch,\n        `${this.url}/admin/users/${uid}`,\n        {},\n        {\n          headers: this._createRequestHeaders(jwt),\n        }\n      )\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  async refreshAccessToken(\n    refreshToken: string\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const data: any = await post(\n        this.fetch,\n        `${this.url}/token?grant_type=refresh_token`,\n        { refresh_token: refreshToken },\n        { headers: this.headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Set/delete the auth cookie based on the AuthChangeEvent.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   */\n  setAuthCookie(req: any, res: any) {\n    if (req.method !== 'POST') {\n      res.setHeader('Allow', 'POST')\n      res.status(405).end('Method Not Allowed')\n    }\n    const { event, session } = req.body\n    if (!event) throw new Error('Auth event missing!')\n    if (event === 'SIGNED_IN') {\n      if (!session) throw new Error('Auth session missing!')\n      setCookie(req, res, {\n        name: this.cookieOptions.name!,\n        value: session.access_token,\n        domain: this.cookieOptions.domain,\n        maxAge: this.cookieOptions.lifetime!,\n        path: this.cookieOptions.path,\n        sameSite: this.cookieOptions.sameSite,\n      })\n    }\n    if (event === 'SIGNED_OUT') deleteCookie(req, res, this.cookieOptions.name!)\n    res.status(200).json({})\n  }\n\n  /**\n   * Get user by reading the cookie from the request.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   */\n  async getUserByCookie(req: any): Promise<{\n    token: string | null\n    user: User | null\n    data: User | null\n    error: ApiError | null\n  }> {\n    try {\n      if (!req.cookies) {\n        throw new Error(\n          'Not able to parse cookies! When using Express make sure the cookie-parser middleware is in use!'\n        )\n      }\n      if (!req.cookies[this.cookieOptions.name!]) {\n        throw new Error('No cookie found!')\n      }\n      const token = req.cookies[this.cookieOptions.name!]\n      const { user, error } = await this.getUser(token)\n      if (error) throw error\n      return { token, user, data: user, error: null }\n    } catch (e) {\n      return { token: null, user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Generates links to be sent via email or other.\n   * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   * @param email The user's email.\n   * @param password User password. For signup only.\n   * @param data Optional user metadata. For signup only.\n   * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   */\n  async generateLink(\n    type: 'signup' | 'magiclink' | 'recovery' | 'invite',\n    email: string,\n    options: {\n      password?: string\n      data?: object\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const data: any = await post(\n        this.fetch,\n        `${this.url}/admin/generate_link`,\n        {\n          type,\n          email,\n          password: options.password,\n          data: options.data,\n          redirect_to: options.redirectTo,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}