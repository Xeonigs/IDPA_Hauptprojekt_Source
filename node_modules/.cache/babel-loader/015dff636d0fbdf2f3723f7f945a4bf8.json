{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _inherits from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport var SupabaseQueryBuilder = /*#__PURE__*/function (_PostgrestQueryBuilde) {\n  _inherits(SupabaseQueryBuilder, _PostgrestQueryBuilde);\n\n  var _super = _createSuper(SupabaseQueryBuilder);\n\n  function SupabaseQueryBuilder(url, _ref) {\n    var _this;\n\n    var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        realtime = _ref.realtime,\n        table = _ref.table,\n        fetch = _ref.fetch;\n\n    _classCallCheck(this, SupabaseQueryBuilder);\n\n    _this = _super.call(this, url, {\n      headers: headers,\n      schema: schema,\n      fetch: fetch\n    });\n    _this._subscription = null;\n    _this._realtime = realtime;\n    _this._headers = headers;\n    _this._schema = schema;\n    _this._table = table;\n    return _this;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  _createClass(SupabaseQueryBuilder, [{\n    key: \"on\",\n    value: function on(event, callback) {\n      if (!this._realtime.isConnected()) {\n        this._realtime.connect();\n      }\n\n      if (!this._subscription) {\n        this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n      }\n\n      return this._subscription.on(event, callback);\n    }\n  }]);\n\n  return SupabaseQueryBuilder;\n}(PostgrestQueryBuilder);","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\supabase-js\\src\\lib\\SupabaseQueryBuilder.ts"],"names":[],"mappings":";;;;AAAA,SAAS,qBAAT,QAAsC,wBAAtC;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AAIA,WAAa,oBAAb;AAAA;;AAAA;;AAOE,gCACE,GADF,QAcG;AAAA;;AAAA,4BAXC,OAWD;AAAA,QAXC,OAWD,6BAXW,EAWX;AAAA,QAVC,MAUD,QAVC,MAUD;AAAA,QATC,QASD,QATC,QASD;AAAA,QARC,KAQD,QARC,KAQD;AAAA,QAPC,KAOD,QAPC,KAOD;;AAAA;;AAED,8BAAM,GAAN,EAAW;AAAE,MAAA,OAAO,EAAP,OAAF;AAAW,MAAA,MAAM,EAAN,MAAX;AAAmB,MAAA,KAAK,EAAL;AAAnB,KAAX;AAtBM,UAAA,aAAA,GAA+C,IAA/C;AAwBN,UAAK,SAAL,GAAiB,QAAjB;AACA,UAAK,QAAL,GAAgB,OAAhB;AACA,UAAK,OAAL,GAAe,MAAf;AACA,UAAK,MAAL,GAAc,KAAd;AAPC;AAQF;AAED;;;;AAIG;;;AAnCL;AAAA;AAAA,WAoCE,YACE,KADF,EAEE,QAFF,EAEyD;AAEvD,UAAI,CAAC,KAAK,SAAL,CAAe,WAAf,EAAL,EAAmC;AACjC,aAAK,SAAL,CAAe,OAAf;AACD;;AACD,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB,aAAK,aAAL,GAAqB,IAAI,sBAAJ,CACnB,KAAK,SADc,EAEnB,KAAK,QAFc,EAGnB,KAAK,OAHc,EAInB,KAAK,MAJc,CAArB;AAMD;;AACD,aAAO,KAAK,aAAL,CAAmB,EAAnB,CAAsB,KAAtB,EAA6B,QAA7B,CAAP;AACD;AApDH;;AAAA;AAAA,EAA6C,qBAA7C","sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: { [key: string]: string }\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n    }: {\n      headers?: { [key: string]: string }\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n    }\n  ) {\n    super(url, { headers, schema, fetch })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}