{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, remove as _remove } from './fetch';\nimport fetch from 'cross-fetch';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport var StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, StorageFileApi);\n\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = fetch;\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var body, options, headers, _path, res, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                  'x-upsert': String(options.upsert)\n                });\n\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                  body = new FormData();\n                  body.append('cacheControl', options.cacheControl);\n                  body.append('', fileBody);\n                } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                  body = fileBody;\n                  body.append('cacheControl', options.cacheControl);\n                } else {\n                  body = fileBody;\n                  headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                  headers['content-type'] = options.contentType;\n                }\n\n                _path = this._getFinalPath(path);\n                _context.next = 7;\n                return fetch(\"\".concat(this.url, \"/object/\").concat(_path), {\n                  method: method,\n                  body: body,\n                  headers: headers\n                });\n\n              case 7:\n                res = _context.sent;\n\n                if (!res.ok) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  data: {\n                    Key: _path\n                  },\n                  error: null\n                });\n\n              case 12:\n                _context.next = 14;\n                return res.json();\n\n              case 14:\n                error = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: error\n                });\n\n              case 16:\n                _context.next = 21;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 18]]);\n      }));\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Moves an existing file, optionally renaming it at the same time.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n     *\n     * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     */\n\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _path, data, signedURL;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _path = this._getFinalPath(path);\n                _context5.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), {\n                  expiresIn: expiresIn\n                }, {\n                  headers: this.headers\n                });\n\n              case 4:\n                data = _context5.sent;\n                signedURL = \"\".concat(this.url).concat(data.signedURL);\n                data = {\n                  signedURL: signedURL\n                };\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null,\n                  signedURL: signedURL\n                });\n\n              case 10:\n                _context5.prev = 10;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0,\n                  signedURL: null\n                });\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Downloads a file.\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n\n  }, {\n    key: \"download\",\n    value: function download(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _path, res, data;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _path = this._getFinalPath(path);\n                _context6.next = 4;\n                return get(this.fetch, \"\".concat(this.url, \"/object/\").concat(_path), {\n                  headers: this.headers,\n                  noResolveJson: true\n                });\n\n              case 4:\n                res = _context6.sent;\n                _context6.next = 7;\n                return res.blob();\n\n              case 7:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Retrieve URLs for assets in public buckets\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path) {\n      try {\n        var _path = this._getFinalPath(path);\n\n        var publicURL = \"\".concat(this.url, \"/object/public/\").concat(_path);\n        var data = {\n          publicURL: publicURL\n        };\n        return {\n          data: data,\n          error: null,\n          publicURL: publicURL\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error: error,\n          publicURL: null\n        };\n      }\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to be deletes, including the path and file name. For example [`folder/image.png`].\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                  prefixes: paths\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](0);\n                return _context7.abrupt(\"return\", {\n                  data: null,\n                  error: _context7.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     * @param options Search options, including `limit`, `offset`, and `sortBy`.\n     * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var body, data;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                  prefix: path || ''\n                });\n                _context8.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                  headers: this.headers\n                }, parameters);\n\n              case 4:\n                data = _context8.sent;\n                return _context8.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 8:\n                _context8.prev = 8;\n                _context8.t0 = _context8[\"catch\"](0);\n                return _context8.abrupt(\"return\", {\n                  data: null,\n                  error: _context8.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }]);\n\n  return StorageFileApi;\n}();","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\storage-js\\src\\lib\\StorageFileApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fetch, FetchParameters, get, post, remove } from './fetch'\nimport { isBrowser } from './helpers'\nimport { FileObject, FileOptions, SearchOptions } from './types'\nimport fetch from 'cross-fetch'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch?: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = fetch\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const _path = this._getFinalPath(path)\n      const res = await fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        // const data = await res.json()\n        // temporary fix till backend is updated to the latest storage-api version\n        return { data: { Key: _path }, error: null }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file, optionally renaming it at the same time.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number\n  ): Promise<{\n    data: { signedURL: string } | null\n    error: Error | null\n    signedURL: string | null\n  }> {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const signedURL = `${this.url}${data.signedURL}`\n      data = { signedURL }\n      return { data, error: null, signedURL }\n    } catch (error) {\n      return { data: null, error, signedURL: null }\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  async download(path: string): Promise<{ data: Blob | null; error: Error | null }> {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(\n    path: string\n  ): {\n    data: { publicURL: string } | null\n    error: Error | null\n    publicURL: string | null\n  } {\n    try {\n      const _path = this._getFinalPath(path)\n      const publicURL = `${this.url}/object/public/${_path}`\n      const data = { publicURL }\n      return { data, error: null, publicURL }\n    } catch (error) {\n      return { data: null, error, publicURL: null }\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deletes, including the path and file name. For example [`folder/image.png`].\n   */\n  async remove(paths: string[]): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, and `sortBy`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n}\n"]},"metadata":{},"sourceType":"module"}