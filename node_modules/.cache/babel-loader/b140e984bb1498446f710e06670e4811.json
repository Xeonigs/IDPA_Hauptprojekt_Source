{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer() {\n    _classCallCheck(this, Serializer);\n\n    this.HEADER_LENGTH = 1;\n  }\n\n  _createClass(Serializer, [{\n    key: \"decode\",\n    value: function decode(rawPayload, callback) {\n      if (rawPayload.constructor === ArrayBuffer) {\n        return callback(this._binaryDecode(rawPayload));\n      }\n\n      if (typeof rawPayload === 'string') {\n        return callback(JSON.parse(rawPayload));\n      }\n\n      return callback({});\n    }\n  }, {\n    key: \"_binaryDecode\",\n    value: function _binaryDecode(buffer) {\n      var view = new DataView(buffer);\n      var decoder = new TextDecoder();\n      return this._decodeBroadcast(buffer, view, decoder);\n    }\n  }, {\n    key: \"_decodeBroadcast\",\n    value: function _decodeBroadcast(buffer, view, decoder) {\n      var topicSize = view.getUint8(1);\n      var eventSize = view.getUint8(2);\n      var offset = this.HEADER_LENGTH + 2;\n      var topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n      offset = offset + topicSize;\n      var event = decoder.decode(buffer.slice(offset, offset + eventSize));\n      offset = offset + eventSize;\n      var data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n      return {\n        ref: null,\n        topic: topic,\n        event: event,\n        payload: data\n      };\n    }\n  }]);\n\n  return Serializer;\n}();\n\nexport { Serializer as default };","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\realtime-js\\src\\lib\\serializer.ts"],"names":[],"mappings":";;;AAAA;AACA;IAEqB,U;AAArB,wBAAA;AAAA;;AACE,SAAA,aAAA,GAAgB,CAAhB;AA4CD;;;;WA1CC,gBAAO,UAAP,EAAyC,QAAzC,EAA2D;AACzD,UAAI,UAAU,CAAC,WAAX,KAA2B,WAA/B,EAA4C;AAC1C,eAAO,QAAQ,CAAC,KAAK,aAAL,CAAmB,UAAnB,CAAD,CAAf;AACD;;AAED,UAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,eAAO,QAAQ,CAAC,IAAI,CAAC,KAAL,CAAW,UAAX,CAAD,CAAf;AACD;;AAED,aAAO,QAAQ,CAAC,EAAD,CAAf;AACD;;;WAEO,uBAAc,MAAd,EAAiC;AACvC,UAAM,IAAI,GAAG,IAAI,QAAJ,CAAa,MAAb,CAAb;AACA,UAAM,OAAO,GAAG,IAAI,WAAJ,EAAhB;AAEA,aAAO,KAAK,gBAAL,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC,OAApC,CAAP;AACD;;;WAEO,0BACN,MADM,EAEN,IAFM,EAGN,OAHM,EAGc;AAOpB,UAAM,SAAS,GAAG,IAAI,CAAC,QAAL,CAAc,CAAd,CAAlB;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,QAAL,CAAc,CAAd,CAAlB;AACA,UAAI,MAAM,GAAG,KAAK,aAAL,GAAqB,CAAlC;AACA,UAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,GAAG,SAA9B,CAAf,CAAd;AACA,MAAA,MAAM,GAAG,MAAM,GAAG,SAAlB;AACA,UAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,GAAG,SAA9B,CAAf,CAAd;AACA,MAAA,MAAM,GAAG,MAAM,GAAG,SAAlB;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CACX,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,CAAC,UAA5B,CAAf,CADW,CAAb;AAIA,aAAO;AAAE,QAAA,GAAG,EAAE,IAAP;AAAa,QAAA,KAAK,EAAE,KAApB;AAA2B,QAAA,KAAK,EAAE,KAAlC;AAAyC,QAAA,OAAO,EAAE;AAAlD,OAAP;AACD;;;;;;SA5CkB,U","sourcesContent":["// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\n\nexport default class Serializer {\n  HEADER_LENGTH = 1\n\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload))\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload))\n    }\n\n    return callback({})\n  }\n\n  private _binaryDecode(buffer: ArrayBuffer) {\n    const view = new DataView(buffer)\n    const decoder = new TextDecoder()\n\n    return this._decodeBroadcast(buffer, view, decoder)\n  }\n\n  private _decodeBroadcast(\n    buffer: ArrayBuffer,\n    view: DataView,\n    decoder: TextDecoder\n  ): {\n    ref: null\n    topic: string\n    event: string\n    payload: object\n  } {\n    const topicSize = view.getUint8(1)\n    const eventSize = view.getUint8(2)\n    let offset = this.HEADER_LENGTH + 2\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\n    offset = offset + topicSize\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\n    offset = offset + eventSize\n    const data = JSON.parse(\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\n    )\n\n    return { ref: null, topic: topic, event: event, payload: data }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}