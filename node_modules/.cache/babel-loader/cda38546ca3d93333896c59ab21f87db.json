{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Dave\\\\WebstormProjects\\\\wappsite\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Transformers } from '@supabase/realtime-js';\nexport var SupabaseRealtimeClient = /*#__PURE__*/function () {\n  function SupabaseRealtimeClient(socket, headers, schema, tableName) {\n    _classCallCheck(this, SupabaseRealtimeClient);\n\n    var chanParams = {};\n    var topic = tableName === '*' ? \"realtime:\".concat(schema) : \"realtime:\".concat(schema, \":\").concat(tableName);\n    var userToken = headers['Authorization'].split(' ')[1];\n\n    if (userToken) {\n      chanParams['user_token'] = userToken;\n    }\n\n    this.subscription = socket.channel(topic, chanParams);\n  }\n\n  _createClass(SupabaseRealtimeClient, [{\n    key: \"getPayloadRecords\",\n    value: function getPayloadRecords(payload) {\n      var records = {\n        new: {},\n        old: {}\n      };\n\n      if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n        records.new = Transformers.convertChangeData(payload.columns, payload.record);\n      }\n\n      if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n        records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n      }\n\n      return records;\n    }\n    /**\n     * The event you want to listen to.\n     *\n     * @param event The event\n     * @param callback A callback function that is called whenever the event occurs.\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var _this = this;\n\n      this.subscription.on(event, function (payload) {\n        var enrichedPayload = {\n          schema: payload.schema,\n          table: payload.table,\n          commit_timestamp: payload.commit_timestamp,\n          eventType: payload.type,\n          new: {},\n          old: {},\n          errors: payload.errors\n        };\n        enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), _this.getPayloadRecords(payload));\n        callback(enrichedPayload);\n      });\n      return this;\n    }\n    /**\n     * Enables the subscription.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      this.subscription.onError(function (e) {\n        return callback('SUBSCRIPTION_ERROR', e);\n      });\n      this.subscription.onClose(function () {\n        return callback('CLOSED');\n      });\n      this.subscription.subscribe().receive('ok', function () {\n        return callback('SUBSCRIBED');\n      }).receive('error', function (e) {\n        return callback('SUBSCRIPTION_ERROR', e);\n      }).receive('timeout', function () {\n        return callback('RETRYING_AFTER_TIMEOUT');\n      });\n      return this.subscription;\n    }\n  }]);\n\n  return SupabaseRealtimeClient;\n}();","map":{"version":3,"sources":["C:\\Users\\Dave\\WebstormProjects\\wappsite\\node_modules\\@supabase\\supabase-js\\src\\lib\\SupabaseRealtimeClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { RealtimeSubscription, RealtimeClient, Transformers } from '@supabase/realtime-js'\nimport { SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseRealtimeClient {\n  subscription: RealtimeSubscription\n\n  constructor(\n    socket: RealtimeClient,\n    headers: { [key: string]: string },\n    schema: string,\n    tableName: string\n  ) {\n    const chanParams: { [key: string]: string } = {}\n    const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`\n    const userToken = headers['Authorization'].split(' ')[1]\n\n    if (userToken) {\n      chanParams['user_token'] = userToken\n    }\n\n    this.subscription = socket.channel(topic, chanParams)\n  }\n\n  private getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record)\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record)\n    }\n\n    return records\n  }\n\n  /**\n   * The event you want to listen to.\n   *\n   * @param event The event\n   * @param callback A callback function that is called whenever the event occurs.\n   */\n  on(event: SupabaseEventTypes, callback: (payload: SupabaseRealtimePayload<any>) => void) {\n    this.subscription.on(event, (payload: any) => {\n      let enrichedPayload: SupabaseRealtimePayload<any> = {\n        schema: payload.schema,\n        table: payload.table,\n        commit_timestamp: payload.commit_timestamp,\n        eventType: payload.type,\n        new: {},\n        old: {},\n        errors: payload.errors,\n      }\n\n      enrichedPayload = { ...enrichedPayload, ...this.getPayloadRecords(payload) }\n\n      callback(enrichedPayload)\n    })\n    return this\n  }\n\n  /**\n   * Enables the subscription.\n   */\n  subscribe(callback: Function = () => {}) {\n    this.subscription.onError((e: Error) => callback('SUBSCRIPTION_ERROR', e))\n    this.subscription.onClose(() => callback('CLOSED'))\n    this.subscription\n      .subscribe()\n      .receive('ok', () => callback('SUBSCRIBED'))\n      .receive('error', (e: Error) => callback('SUBSCRIPTION_ERROR', e))\n      .receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'))\n    return this.subscription\n  }\n}\n"]},"metadata":{},"sourceType":"module"}