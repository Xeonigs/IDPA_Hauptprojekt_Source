[{"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\index.js":"1","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\reportWebVitals.js":"2","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\App.js":"3","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\Auth.js":"4","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\private_sites\\FinancialOverview.js":"5","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\supabaseClient.js":"6","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\public_sites\\Login.js":"7","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\public_sites\\Signup.js":"8","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\public_sites\\Predictor.js":"9","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\CustomRoute.js":"10","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\Navigation.js":"11"},{"size":483,"mtime":1642011540000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1642010796000,"results":"14","hashOfConfig":"13"},{"size":1084,"mtime":1642106102082,"results":"15","hashOfConfig":"13"},{"size":1005,"mtime":1642002538000,"results":"16","hashOfConfig":"13"},{"size":12787,"mtime":1642101929133,"results":"17","hashOfConfig":"13"},{"size":245,"mtime":1639067468000,"results":"18","hashOfConfig":"13"},{"size":1878,"mtime":1642070501000,"results":"19","hashOfConfig":"13"},{"size":2334,"mtime":1642070527000,"results":"20","hashOfConfig":"13"},{"size":2269,"mtime":1642070696000,"results":"21","hashOfConfig":"13"},{"size":638,"mtime":1642060313000,"results":"22","hashOfConfig":"13"},{"size":1868,"mtime":1642070313000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1dr5ik5",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\index.js",[],["48","49"],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\reportWebVitals.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\App.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\Auth.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\private_sites\\FinancialOverview.js",["50","51"],"import { Fragment, Component } from 'react';\r\nimport { supabase } from '../components/supabaseClient'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js'\r\nimport { FaRegTrashAlt } from 'react-icons/fa';\r\nimport { Navigation } from \"../components/Navigation\";\r\nimport { Container, Row, Col, Accordion, Table, Button, InputGroup, FormControl, ButtonGroup } from 'react-bootstrap';\r\nimport \"../styles/styles.css\"\r\n\r\nexport class FinancialOverview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {income_forms: [], spending_forms: [], incomes: {}, spendings: {}};\r\n    }\r\n\r\n    async componentDidMount(){\r\n        this.fetch_all()\r\n        await supabase\r\n            .from('income_forms')\r\n            .select()\r\n\r\n    }\r\n\r\n    async fetch_all() {\r\n        const data_income_forms = await this.fetchIncomeForms_forUser()\r\n        const data_incomes_dict = {}\r\n        for (let index_income_form in data_income_forms) {\r\n            const id = data_income_forms[index_income_form].id\r\n            data_incomes_dict[id] = await this.fetchIncomes_forIncomeForms(id)\r\n        }\r\n\r\n        const data_spending_forms = await this.fetchSpendingForms_forUser()\r\n        const data_spendings_dict = {}\r\n        for (let index_spending_form in data_spending_forms) {\r\n            const id = data_spending_forms[index_spending_form].id\r\n            data_spendings_dict[id] = await this.fetchSpendings_forSpendingForms(id)\r\n        }\r\n\r\n        this.setState({income_forms: data_income_forms, incomes: data_incomes_dict, spending_forms: data_spending_forms, spendings: data_spendings_dict})\r\n    }\r\n\r\n    async fetchIncomeForms_forUser() {\r\n        const { data } = await supabase\r\n            .from('income_forms')\r\n            .select()\r\n        return data\r\n    }\r\n\r\n    async fetchIncomes_forIncomeForms(income_forms_id) {\r\n        const { data } = await supabase\r\n            .from(\"incomes\")\r\n            .select()\r\n            .eq(\"income_forms_id\", income_forms_id)\r\n\r\n        return data\r\n    }\r\n\r\n    async fetchSpendingForms_forUser() {\r\n        const { data } = await supabase\r\n            .from(\"spending_forms\")\r\n            .select()\r\n        return data\r\n    }\r\n\r\n    async fetchSpendings_forSpendingForms(spending_forms_id) {\r\n        const { data } = await supabase\r\n            .from(\"spendings\")\r\n            .select()\r\n            .eq(\"spending_forms_id\", spending_forms_id)\r\n        return data\r\n    }\r\n\r\n    async createIncomeCategorie(title) {\r\n        if (!(title.replace(/\\s/g, '') === '')) {\r\n            const { data, error } = await supabase\r\n                .from('income_forms')\r\n                .insert([\r\n                    { title: title, user_id: supabase.auth.user().id }\r\n                ])\r\n            await this.fetch_all();\r\n        }\r\n        this.setState({title: ''})\r\n    }\r\n\r\n    async createSpendingCategorie(title) {\r\n        if (!(title.replace(/\\s/g, '') === '')) {\r\n            /*const { data, error } =*/ await supabase\r\n                .from('spending_forms')\r\n                .insert([\r\n                    { title: title, user_id: supabase.auth.user().id }\r\n                ])\r\n            await this.fetch_all();\r\n        }\r\n        this.setState({title: ''})\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.income_forms)\r\n\r\n        return(\r\n            <>\r\n                <Navigation />\r\n                <Container>\r\n                    <Row className=\"mt-5\">\r\n                        <Col md={6}>\r\n                            <div className=\"inTitle\">\r\n                                <h2 className=\"text-center title\">Einnahmen</h2>\r\n                            </div>\r\n                            <div className=\"inTitle\">\r\n                                <InputGroup>\r\n                                    <FormControl type=\"text\" id=\"new_incomeform_input\" placeholder=\"Neue Kategorie\" className=\"bg-light\" />\r\n                                    <Button className=\"buttonColor\" variant=\"secondary\" onClick={() => {\r\n                                        const input = document.getElementById(\"new_incomeform_input\")\r\n                                        this.createIncomeCategorie(input.value).then()\r\n                                        input.value = \"\"\r\n                                    }}>Einnahme-Kategorie erstellen</Button>\r\n                                </InputGroup>\r\n                                <br/>\r\n                            </div>\r\n                            <Accordion>\r\n                                {\r\n                                    insertAccordion(this.state.income_forms, this.state.incomes, true, this.fetch_all.bind(this))\r\n                                }\r\n                            </Accordion>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <div className=\"inTitle\">\r\n                                <h2 className=\"text-center title\">Ausgabe</h2>\r\n                            </div>\r\n                            <div className=\"inTitle\">\r\n                                <InputGroup>\r\n                                    <FormControl type=\"text\" id=\"new_spendingform_input\" placeholder=\"Neue Kategorie\" className=\"bg-light\" />\r\n                                    <Button className=\"buttonColor\" variant=\"secondary\" onClick={() => {\r\n                                        const input = document.getElementById(\"new_spendingform_input\")\r\n                                        this.createSpendingCategorie(input.value).then()\r\n                                        input.value = \"\"\r\n                                    }}>Ausgabe-Kategorie erstellen</Button>\r\n                                </InputGroup>\r\n                                <br/>\r\n                            </div>\r\n                            <Accordion>\r\n                                {\r\n                                    insertAccordion(this.state.spending_forms, this.state.spendings, false, this.fetch_all.bind(this))\r\n                                }\r\n                            </Accordion>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction insertAccordion(forms, entries, isIncome, fetch_method) {\r\n    return forms.map(form => (\r\n        <Fragment key={form.id + isIncome}>\r\n            <InsertAccordion isIncome={isIncome} form={form} amounts={entries[form.id]} fetch_method={fetch_method} />\r\n        </Fragment>\r\n    ))\r\n}\r\n\r\nclass InsertAccordion extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isIncome: props.isIncome,\r\n            form: props.form,\r\n            amounts: props.amounts,\r\n            title: '',\r\n            amount: '',\r\n            fetch_method: props.fetch_method\r\n        }\r\n    }\r\n\r\n    async fetch_entries() {\r\n        if (this.state.isIncome) {\r\n            this.setState({amounts: await this.fetchIncomes()})\r\n        }\r\n        else {\r\n            this.setState({amounts: await this.fetchSpendings()})\r\n        }\r\n    }\r\n\r\n    async fetchIncomes() {\r\n        const { data } = await supabase\r\n            .from('incomes')\r\n            .select()\r\n            .eq(\"income_forms_id\", this.state.form.id)\r\n        return data\r\n    }\r\n\r\n    async fetchSpendings() {\r\n        const { data } = await supabase\r\n            .from('spendings')\r\n            .select()\r\n            .eq(\"spending_forms_id\", this.state.form.id)\r\n        return data\r\n    }\r\n\r\n    async create_entry() {\r\n        if (!(this.state.title.replace(/\\s/g, '') === '' || this.state.amount.replace(/\\s/g, '') === '')) {\r\n            let amounts\r\n            if (this.state.isIncome) {\r\n                await supabase\r\n                    .from(\"incomes\")\r\n                    .insert([\r\n                        { income_forms_id: this.state.form.id, title: this.state.title, amount: this.state.amount }\r\n                    ])\r\n                amounts = await this.fetchIncomes()\r\n            }\r\n            else {\r\n                await supabase\r\n                    .from(\"spendings\")\r\n                    .insert([\r\n                        { spending_forms_id: this.state.form.id, title: this.state.title, amount: this.state.amount }\r\n                    ])\r\n\r\n                amounts = await this.fetchSpendings()\r\n            }\r\n            this.setState({amounts: amounts})\r\n        }\r\n        this.setState({title: '', amount: ''})\r\n    }\r\n\r\n    async delete_category() {\r\n        if (this.state.isIncome) {\r\n            await supabase\r\n                .from('incomes')\r\n                .delete()\r\n                .match({income_forms_id: this.state.form.id})\r\n\r\n            await supabase\r\n                .from('income_forms')\r\n                .delete()\r\n                .match({id: this.state.form.id})\r\n        }\r\n        else {\r\n            await supabase\r\n                .from('spendings')\r\n                .delete()\r\n                .match({spending_forms_id: this.state.form.id})\r\n\r\n            await supabase\r\n                .from('spending_forms')\r\n                .delete()\r\n                .match({id: this.state.form.id})\r\n        }\r\n        await this.state.fetch_method()\r\n    }\r\n\r\n\r\n    render() {\r\n        const valid_numbers_input = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\" , \"Delete\", \"Backspace\", \"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"]\r\n\r\n        return(\r\n            <Accordion.Item eventKey={this.state.form.id}>\r\n                <ButtonGroup className=\"button-group\">\r\n                    <Accordion.Header className=\"button-accordion\">\r\n                        <span>{this.state.form.title}</span>\r\n                    </Accordion.Header>\r\n                    <Button className=\"button-del-category\" variant=\"transparent\" onClick={() => {this.delete_category().then()}}><FaRegTrashAlt className=\"text-danger\"/></Button>\r\n                </ButtonGroup>\r\n                <Accordion.Body>\r\n                    <InputGroup>\r\n                        <FormControl type=\"text\" className=\"bg-light\" placeholder=\"Name\" onChange={e => this.setState({ title: e.target.value })} value={this.state.title} />\r\n                        <FormControl type=\"number\" className=\"bg-light\"  placeholder=\"Preis\" onChange={e => this.setState({ amount: e.target.value })} onKeyDown={e => {if (!valid_numbers_input.includes(e.key)) e.preventDefault()}} value={this.state.amount} />\r\n                        <Button className=\"inputField\" variant=\"secondary\" onClick={() => {this.create_entry().then()}}>hinzufügen</Button>\r\n                    </InputGroup>\r\n                    <br/>\r\n                    <Table striped bordered hover variant=\"dark\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Preis</th>\r\n                            <th className=\"table-del-row text-center\"><FaRegTrashAlt/></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            insertTableContent(this.state.amounts, this.state.isIncome, this.fetch_entries.bind(this)/*, this.state.fetch_method*/)\r\n                        }\r\n                        </tbody>\r\n                    </Table>\r\n                </Accordion.Body>\r\n            </Accordion.Item>\r\n        );\r\n    }\r\n}\r\n\r\nfunction insertTableContent(entries, isIncome, fetch_method) {\r\n    return entries.map(entry => (\r\n        <Fragment key={entry.id + isIncome}>\r\n            <InsertTable isIncome={isIncome} entry={entry} fetch_method={fetch_method} />\r\n        </Fragment>\r\n    ))\r\n}\r\n\r\nclass InsertTable extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isIncome: props.isIncome,\r\n            entry: props.entry,\r\n            fetch_method: props.fetch_method\r\n        }\r\n    }\r\n\r\n    async delete_entry(entry_id) {\r\n        if (this.state.isIncome) {\r\n            await supabase\r\n                .from('incomes')\r\n                .delete()\r\n                .match({id: entry_id})\r\n        } else {\r\n            await supabase\r\n                .from('spendings')\r\n                .delete()\r\n                .match({id: entry_id})\r\n        }\r\n        await this.state.fetch_method()\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <tr>\r\n                <td>{this.state.entry.title}</td>\r\n                <td>{this.state.entry.amount}</td>\r\n                <td><Button className=\"button-del-category\" variant=\"transparent\" onClick={() => {this.delete_entry(this.state.entry.id).then()}}><FaRegTrashAlt className=\"text-danger\"/></Button></td>\r\n            </tr>\r\n        );\r\n    }\r\n}","C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\supabaseClient.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\public_sites\\Login.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\public_sites\\Signup.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\public_sites\\Predictor.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\CustomRoute.js",[],"C:\\Users\\Dave\\WebstormProjects\\wappsite\\src\\components\\Navigation.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":75,"column":21,"nodeType":"58","messageId":"59","endLine":75,"endColumn":25},{"ruleId":"56","severity":1,"message":"60","line":75,"column":27,"nodeType":"58","messageId":"59","endLine":75,"endColumn":32},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]